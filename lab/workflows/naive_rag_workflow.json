{
  "name": "Naive RAG Demo",
  "nodes": [
    {
      "parameters": {},
      "id": "c8d6b4c8-7f8a-4c2b-9e1d-2f3a4b5c6d7e",
      "name": "Demo Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "query",
              "value": "What is WAL in PostgreSQL and why is it important?"
            },
            {
              "name": "method",
              "value": "naive"
            },
            {
              "name": "top_k",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6",
      "name": "Query Setup",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:8000/search",
        "options": {
          "headers": {
            "Content-Type": "application/json"
          }
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            },
            {
              "name": "method",
              "value": "={{ $json.method }}"
            },
            {
              "name": "top_k",
              "value": "={{ parseInt($json.top_k) }}"
            },
            {
              "name": "include_metadata",
              "value": "true"
            },
            {
              "name": "include_timing",
              "value": "true"
            }
          ]
        },
        "sendBody": true
      },
      "id": "b2c3d4e5-f6g7-8h9i-0j1k-l2m3n4o5p6q7",
      "name": "RAG Search API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [680, 300]
    },
    {
      "parameters": {
        "functionCode": "// Extract and format the API response\nconst response = items[0].json;\n\n// Create formatted output\nconst output = {\n  query: response.query,\n  method: response.method_used,\n  answer: response.answer,\n  timing_ms: response.timing?.total_ms || 0,\n  context_count: response.contexts?.length || 0,\n  top_contexts: (response.contexts || []).slice(0, 3).map(ctx => ({\n    title: ctx.title,\n    similarity: ctx.sim_dense || ctx.similarity || 0,\n    snippet: (ctx.content || '').substring(0, 200) + '...'\n  })),\n  success: response.success,\n  raw_response: response\n};\n\n// Add success indicator\nif (response.success) {\n  output.status = '✅ SUCCESS';\n} else {\n  output.status = '❌ ERROR';\n}\n\nreturn [{ json: output }];"
      },
      "id": "c3d4e5f6-g7h8-9i0j-1k2l-m3n4o5p6q7r8",
      "name": "Format Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.success }}",
              "operation": "equal",
              "value2": "true"
            }
          ]
        }
      },
      "id": "d4e5f6g7-h8i9-0j1k-2l3m-n4o5p6q7r8s9",
      "name": "Success Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 300]
    }
  ],
  "connections": {
    "Demo Start": {
      "main": [
        [
          {
            "node": "Query Setup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Setup": {
      "main": [
        [
          {
            "node": "RAG Search API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG Search API": {
      "main": [
        [
          {
            "node": "Format Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Results": {
      "main": [
        [
          {
            "node": "Success Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "1",
  "id": "naive-rag-demo-workflow",
  "meta": {
    "created_at": "2025-09-05T10:00:00.000Z",
    "updated_at": "2025-09-05T10:00:00.000Z",
    "instanceId": "n8n-rag-demo"
  },
  "tags": [
    {
      "id": "rag-demo",
      "name": "RAG Demo"
    }
  ]
}